@startuml
class resources.Rating {
~ RatingPK key
- java.sql.Date sqlDate
- double rating
+ RatingPK getKey()
+ void setKey(RatingPK)
+ double getRating()
+ void setRating(double)
+ Date getSqlDate()
+ void setSqlDate(Date)
+ boolean equals(Object)
+ int hashCode()
}
class resources.Community {
- String name
- List<Exemplar> exemplars
- List<User> members
- User creator
+ String getName()
+ void setName(String)
+ List<Exemplar> getExemplars()
+ void setExemplars(List<Exemplar>)
+ List<User> getMembers()
+ void setUsers(List<User>)
+ User getCreator()
+ void setCreator(User)
+ String toString()
+ void setMembers(List<User>)
+ boolean equals(Object)
+ int hashCode()
}
interface resources.CommentRepository {
~ List<Comment> findCommentsForExemplar(String)
}
class resources.LabelController {
- LabelRepository repository
+ List<Label> getLabels()
+ Label addLabel(Label)
+ Label getLabel(String)
+ void deleteLabel(String)
}
class resources.RatingController {
- RatingRepository repository
+ List<Rating> getRatings()
+ Rating addRating(Rating)
+ Rating updateRating(Rating,String,String)
+ Rating getRating(String,String)
+ void deleteRating(String,String)
+ List<Rating> getRatingsForExemplar(String)
+ double getAvgRatingForExemplar(String)
+ Map<String,Integer> getNumberOfRatingsSinceDateByExemplar(String)
}
class resources.CommunityController {
- CommunityRepository repository
+ List<Community> getCommunities()
+ Community addCommunity(Community)
+ Community updateCommunity(Community,String)
+ Community getCommunity(String)
+ void deleteCommunity(String)
+ List<Community> getCommunitiesForMember(String)
+ List<Community> searchCommunities(String)
}
class resources.Exemplar {
- String name
- String problem
- String solution
- User creator
- List<User> contributors
- List<Label> labels
+ List<Label> getLabels()
+ void setLabels(List<Label>)
+ List<User> getContributors()
+ void setContributors(List<User>)
+ String getName()
+ void setName(String)
+ String getProblem()
+ void setProblem(String)
+ String getSolution()
+ void setSolution(String)
+ User getCreator()
+ void setCreator(User)
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}
class com.example.Database.Container.DatabaseContainerApplicationTests {
+ void contextLoads()
}
class resources.CommentController {
+ {static} CommentRepository repository
+ {static} CommentRepository getRepository()
+ void setRepository(CommentRepository)
+ List<Comment> getComments()
+ Comment addComment(Comment)
+ Comment updateComment(Comment,int)
+ Comment getComment(long)
+ void deleteComment(long)
+ List<Comment> findCommentsForExemplar(String)
}
class resources.RatingPK {
- User user
- Exemplar exemplar
+ User getUser()
+ void setUser(User)
+ Exemplar getExemplar()
+ void setExemplar(Exemplar)
+ int hashCode()
+ boolean equals(Object)
}
interface resources.LabelRepository {
}
class com.example.Database.Container.Datenbankverbindung {
+ {static} void main(String[])
}
class resources.User {
- String username
- int isContributor
- String fullName
- String password
+ String getFullName()
+ void setFullName(String)
+ String getPassword()
+ void setPassword(String)
+ void setUsername(String)
+ String getUsername()
+ int getIsContributor()
+ void setIsContributor(int)
+ int hashCode()
+ boolean equals(Object)
+ String toString()
}
class resources.ExemplarController {
+ {static} ExemplarRepository repository
+ {static} ExemplarRepository getRepository()
+ void setRepository(ExemplarRepository)
+ List<Exemplar> getExemplars()
+ Exemplar addExemplar(Exemplar)
+ Exemplar updateExemplar(Exemplar,String)
+ Exemplar getExemplar(String)
+ void deleteExemplar(String)
+ List<Exemplar> findExemplarsForCreator(String)
+ List<Exemplar> findExemplarsForContributor(String)
+ List<Exemplar> findExemplarsForUser(String)
+ List<Exemplar> findExemplarsNameLikeXY(String)
+ List<Exemplar> findExemplarsByLabel(String)
}
class resources.DatabaseContainerApplication {
+ {static} void main(String[])
}
class resources.UserController {
- {static} UserRepository userRepository
+ {static} UserRepository getUserRepository()
+ {static} void setUserRepository(UserRepository)
+ User addUser(User)
+ User updateUser(User,String)
+ List<User> getUsers()
+ User getUser(String)
+ void deleteUser(String)
+ List<User> searchUsers(String)
}
class resources.Comment {
- long id
- String value
- User creator
- Exemplar exemplar
- List<Comment> answers
+ long getId()
+ void setId(long)
+ String getValue()
+ void setValue(String)
+ User getCreator()
+ void setCreator(User)
+ Exemplar getExemplar()
+ void setExemplar(Exemplar)
+ List<Comment> getAnswers()
+ void setAnswers(List<Comment>)
+ boolean equals(Object)
+ int hashCode()
}
interface resources.CommunityRepository {
~ List<Community> getCommunitiesForUser(String)
~ List<Community> searchCommunity_NameLikeXY(String)
}
interface resources.ExemplarRepository {
~ List<Exemplar> findExemplarsForCreator(String)
~ List<Exemplar> findExemplarsForContributor(String)
~ List<Exemplar> findExemplarsForUser(String)
~ List<Exemplar> findExemplarsNameLikeXY(String)
~ List<Exemplar> findExemplarsByLabels(String)
}
interface resources.RatingRepository {
~ List<Rating> findRatingsForExemplar(String)
~ Optional<Double> getAvgRatingForExemlar(String)
~ Map<String,Integer> getNumberOfRatingsLastWeekByExemplar(String)
}
interface resources.UserRepository {
~ List<User> searchUsers(String)
}
class resources.Label {
- String value
+ String getValue()
+ void setValue(String)
+ boolean equals(Object)
+ int hashCode()
}
class resources.TestClient {
+ {static} void main(String[])
}


org.springframework.data.jpa.repository.JpaRepository <|-- resources.CommentRepository
java.io.Serializable <|.. resources.RatingPK
org.springframework.data.jpa.repository.JpaRepository <|-- resources.LabelRepository
org.springframework.data.jpa.repository.JpaRepository <|-- resources.CommunityRepository
org.springframework.data.jpa.repository.JpaRepository <|-- resources.ExemplarRepository
org.springframework.data.jpa.repository.JpaRepository <|-- resources.RatingRepository
org.springframework.data.jpa.repository.JpaRepository <|-- resources.UserRepository
@enduml